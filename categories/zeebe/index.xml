<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zeebe on Josh Wulf</title>
    <link>https://joshwulf.com/categories/zeebe/</link>
    <description>Recent content in zeebe on Josh Wulf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 29 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://joshwulf.com/categories/zeebe/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Refactoring the Zeebe Node gRPC State Machine for Camunda Cloud: Part One</title>
      <link>https://joshwulf.com/blog/2020/02/camunda-cloud-connection/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joshwulf.com/blog/2020/02/camunda-cloud-connection/</guid>
      <description>Preparing for the launch of Camunda Cloud, I turned on continuous integration testing for the Zeebe Node client against a running instance of a Camunda Cloud Zeebe cluster.
I was immediately forced to deal with something I&#39;d been conveniently ignoring - Camunda Cloud gRPC connections always fail initially, before eventually succeeding.
This is because the connection to Camunda Cloud is via a TLS-enabled Nginx reverse proxy with OAuth authentication. This causes the current gRPC client state machine to emit intermediate connection failure events before emitting an eventual &amp;ldquo;READY&amp;rdquo; state.</description>
    </item>
    
    <item>
      <title>A Functional Refactor of Zeebe Node with fp-ts</title>
      <link>https://joshwulf.com/blog/2020/02/functional-refactor/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joshwulf.com/blog/2020/02/functional-refactor/</guid>
      <description>There is no such thing as good coding, only good refactoring.
 I recently did a bunch of work on the Zeebe Node.js client for the upcoming 0.23 release. Zeebe Node is a client library for the Zeebe Microservices Workflow Orchestration Engine, and I maintain it.
While doing other work, I took the opportunity to refactor one method, deployWorkflows, to add a feature that I wanted it to have. I used fp-ts, a TypeScript Functional Programming library to do it.</description>
    </item>
    
    <item>
      <title>20 Tips on travelling like a BOSS</title>
      <link>https://joshwulf.com/blog/2020/01/travel-tips/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://joshwulf.com/blog/2020/01/travel-tips/</guid>
      <description>Over the last 20 years, I&#39;ve done a fair amount of travel around the world. My first trip out of New Zealand on my own - in 1996, to Sydney - was a hot mess. I had no idea that you have to pass through a metal detector at the airport, and I rocked up with batteries, coins, a metal chain on my wallet, a Maglite torch, and a multi-headed screwdriver in my pockets.</description>
    </item>
    
    <item>
      <title>Zero-Scale Zeebe with Cloudflare Workers</title>
      <link>https://joshwulf.com/blog/2019/12/cloudflare-slack/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://joshwulf.com/blog/2019/12/cloudflare-slack/</guid>
      <description>I get questions about running Zeebe at &amp;ldquo;zero-scale&amp;rdquo;. That means workers that consume no resources when there are no tasks to perform.
The Zeebe service on Camunda Cloud includes a generic HTTP-Worker that can be used to achieve this. The HTTP-Worker polls for jobs of type &amp;ldquo;Camunda-HTTP&amp;rdquo;, and then invokes a REST endpoint based on the HTTP verb and URL set in the task headers. If you are not on Camunda Cloud you can use zeebe-http-worker, or just write your own.</description>
    </item>
    
    <item>
      <title>Node.js client for Zeebe Microservices Orchestration Engine</title>
      <link>https://joshwulf.com/blog/2019/01/zeebe-node/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://joshwulf.com/blog/2019/01/zeebe-node/</guid>
      <description>Update: I now work at Camunda on Zeebe as the Node client maintainer and a Developer Advocate. Things have changed in the broker and the library since this was published - for the latest on using it, refer to my new book in development - &amp;ldquo;The Zeebe Node.js Client Guide&amp;quot;
Iâ€™m proud to announce that Credit Sense has open-sourced our Node.js client library for Zeebe. Check it out on GitHub and start using it now!</description>
    </item>
    
  </channel>
</rss>